import { Directive, ElementRef <% if(inputs.length > 0) { %>, Input<% } %><% if(outputs.length > 0) { %>, Output<% } %> } from '@angular/core';
<% for(const dep of dependencies) {%>
import { <%- dep.className %> } from '<%- dep.path %>';<% } %>
<% if(outputs.length > 0) { %>
import { PlaceholderOutput } from '../utils/placeholder-output';
import { Observable } from "rxjs";<% } %>
<% if(inputs.some((input) => input.type === 'boolean')) { %>
import { booleanInput, BooleanInputType } from '../utils/boolean-input';
<% } %>
import '<%- ui5ComponentPath %>';
interface <%- className %>Element {<% for(const input of inputs) { %>
  <%= input.name %>: <% if(input.type === 'boolean') { %>BooleanInputType<% } else { %><%- input.type %><% } %>;<% } %>

  // Slots<% for(const slot of slots) { %>
  <%= slot.name %>: <%- slot.type %>;<% } %>
}
<% if(outputs.length > 0) { %>
interface OutputTypes {<% for(const output of outputs) { %>
  <%= output.name %>: <%- output.type %>;
  <% } %>
}
<% } %>
@Directive({
  selector: '<%- selector %>'
})
export class <%- className %>Directive {
  <% for(const input of inputs) { %>@Input()
  set <%- input.name %>(val: <%- className %>Element["<%- input.name %>"]) { <% if(input.type === 'boolean') { %>
    this.elementRef.nativeElement.<%- input.name %> = booleanInput(val);<% } else { %>
    this.elementRef.nativeElement.<%- input.name %> = val;<% } %>
  }
  get <%- input.name %>() {
    <% if(input.type === 'boolean') { %>
      return this.elementRef.nativeElement.hasAttribute('<%- input.publicName %>');
    <% } else { %>
      return this.elementRef.nativeElement.<%- input.name %>;
    <% } %>
  }<% } %>
  <% for(const output of outputs) { %>
  @Output(<% if(output.publicName) { %>'<%- output.publicName %>'<% } %>) <%- output.name %>: Observable<CustomEvent<OutputTypes["<%- output.name %>"]>> = new PlaceholderOutput();<% } %>
  constructor(private elementRef: ElementRef<<%- className %>Element & HTMLElement>) {
  }

  get element(): typeof this.elementRef['nativeElement'] {
    return this.elementRef.nativeElement;
  }

  <% for(const slot of slots) { %>
  get <%- slot.name %>(): <%- className %>Element['<%- slot.name %>'] {
    return this.elementRef.nativeElement.<%- slot.name %>;
  }
  <% } %>
}
